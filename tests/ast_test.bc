; ModuleID = 'llvm module'

define i8 @"uint8.+"(i8* %this, i8 %param) {
entry:
  %thisval = load i8, i8* %this, align 1
  %addtmp = add i8 %thisval, %param
  ret i8 %addtmp
}

define i8 @uint8.-(i8* %this, i8 %param) {
entry:
  %thisval = load i8, i8* %this, align 1
  %subtmp = sub i8 %thisval, %param
  ret i8 %subtmp
}

define i8 @"uint8.*"(i8* %this, i8 %param) {
entry:
  %thisval = load i8, i8* %this, align 1
  %multmp = mul i8 %thisval, %param
  ret i8 %multmp
}

define i8 @"uint8./"(i8* %this, i8 %param) {
entry:
  %thisval = load i8, i8* %this, align 1
  %divtmp = udiv i8 %thisval, %param
  ret i8 %divtmp
}

define i8 @"uint8.="(i8* %this, i8 %param) {
entry:
  store i8 %param, i8* %this, align 1
  ret i8 %param
}

define i8 @"uint8.++"(i8* %this) {
entry:
  %thisval = load i8, i8* %this, align 1
  %inctmp = add i8 %thisval, 1
  store i8 %inctmp, i8* %this, align 1
  ret i8 %inctmp
}

define i8 @uint8.--(i8* %this) {
entry:
  %thisval = load i8, i8* %this, align 1
  %dectmp = add i8 %thisval, -1
  store i8 %dectmp, i8* %this, align 1
  ret i8 %dectmp
}

define i16 @"uint16.+"(i16* %this, i16 %param) {
entry:
  %thisval = load i16, i16* %this, align 2
  %addtmp = add i16 %thisval, %param
  ret i16 %addtmp
}

define i16 @uint16.-(i16* %this, i16 %param) {
entry:
  %thisval = load i16, i16* %this, align 2
  %subtmp = sub i16 %thisval, %param
  ret i16 %subtmp
}

define i16 @"uint16.*"(i16* %this, i16 %param) {
entry:
  %thisval = load i16, i16* %this, align 2
  %multmp = mul i16 %thisval, %param
  ret i16 %multmp
}

define i16 @"uint16./"(i16* %this, i16 %param) {
entry:
  %thisval = load i16, i16* %this, align 2
  %divtmp = udiv i16 %thisval, %param
  ret i16 %divtmp
}

define i16 @"uint16.="(i16* %this, i16 %param) {
entry:
  store i16 %param, i16* %this, align 2
  ret i16 %param
}

define i16 @"uint16.++"(i16* %this) {
entry:
  %thisval = load i16, i16* %this, align 2
  %inctmp = add i16 %thisval, 1
  store i16 %inctmp, i16* %this, align 2
  ret i16 %inctmp
}

define i16 @uint16.--(i16* %this) {
entry:
  %thisval = load i16, i16* %this, align 2
  %dectmp = add i16 %thisval, -1
  store i16 %dectmp, i16* %this, align 2
  ret i16 %dectmp
}

define i32 @"uint32.+"(i32* %this, i32 %param) {
entry:
  %thisval = load i32, i32* %this, align 4
  %addtmp = add i32 %thisval, %param
  ret i32 %addtmp
}

define i32 @uint32.-(i32* %this, i32 %param) {
entry:
  %thisval = load i32, i32* %this, align 4
  %subtmp = sub i32 %thisval, %param
  ret i32 %subtmp
}

define i32 @"uint32.*"(i32* %this, i32 %param) {
entry:
  %thisval = load i32, i32* %this, align 4
  %multmp = mul i32 %thisval, %param
  ret i32 %multmp
}

define i32 @"uint32./"(i32* %this, i32 %param) {
entry:
  %thisval = load i32, i32* %this, align 4
  %divtmp = udiv i32 %thisval, %param
  ret i32 %divtmp
}

define i32 @"uint32.="(i32* %this, i32 %param) {
entry:
  store i32 %param, i32* %this, align 4
  ret i32 %param
}

define i32 @"uint32.++"(i32* %this) {
entry:
  %thisval = load i32, i32* %this, align 4
  %inctmp = add i32 %thisval, 1
  store i32 %inctmp, i32* %this, align 4
  ret i32 %inctmp
}

define i32 @uint32.--(i32* %this) {
entry:
  %thisval = load i32, i32* %this, align 4
  %dectmp = add i32 %thisval, -1
  store i32 %dectmp, i32* %this, align 4
  ret i32 %dectmp
}

define i64 @"uint64.+"(i64* %this, i64 %param) {
entry:
  %thisval = load i64, i64* %this, align 4
  %addtmp = add i64 %thisval, %param
  ret i64 %addtmp
}

define i64 @uint64.-(i64* %this, i64 %param) {
entry:
  %thisval = load i64, i64* %this, align 4
  %subtmp = sub i64 %thisval, %param
  ret i64 %subtmp
}

define i64 @"uint64.*"(i64* %this, i64 %param) {
entry:
  %thisval = load i64, i64* %this, align 4
  %multmp = mul i64 %thisval, %param
  ret i64 %multmp
}

define i64 @"uint64./"(i64* %this, i64 %param) {
entry:
  %thisval = load i64, i64* %this, align 4
  %divtmp = udiv i64 %thisval, %param
  ret i64 %divtmp
}

define i64 @"uint64.="(i64* %this, i64 %param) {
entry:
  store i64 %param, i64* %this, align 4
  ret i64 %param
}

define i64 @"uint64.++"(i64* %this) {
entry:
  %thisval = load i64, i64* %this, align 4
  %inctmp = add i64 %thisval, 1
  store i64 %inctmp, i64* %this, align 4
  ret i64 %inctmp
}

define i64 @uint64.--(i64* %this) {
entry:
  %thisval = load i64, i64* %this, align 4
  %dectmp = add i64 %thisval, -1
  store i64 %dectmp, i64* %this, align 4
  ret i64 %dectmp
}

define i8 @"int8.+"(i8* %this, i8 %param) {
entry:
  %thisval = load i8, i8* %this, align 1
  %addtmp = add i8 %thisval, %param
  ret i8 %addtmp
}

define i8 @int8.-(i8* %this, i8 %param) {
entry:
  %thisval = load i8, i8* %this, align 1
  %subtmp = sub i8 %thisval, %param
  ret i8 %subtmp
}

define i8 @"int8.*"(i8* %this, i8 %param) {
entry:
  %thisval = load i8, i8* %this, align 1
  %multmp = mul i8 %thisval, %param
  ret i8 %multmp
}

define i8 @"int8./"(i8* %this, i8 %param) {
entry:
  %thisval = load i8, i8* %this, align 1
  %divtmp = sdiv i8 %thisval, %param
  ret i8 %divtmp
}

define i8 @"int8.="(i8* %this, i8 %param) {
entry:
  store i8 %param, i8* %this, align 1
  ret i8 %param
}

define i8 @"int8.++"(i8* %this) {
entry:
  %thisval = load i8, i8* %this, align 1
  %inctmp = add i8 %thisval, 1
  store i8 %inctmp, i8* %this, align 1
  ret i8 %inctmp
}

define i8 @int8.--(i8* %this) {
entry:
  %thisval = load i8, i8* %this, align 1
  %dectmp = add i8 %thisval, -1
  store i8 %dectmp, i8* %this, align 1
  ret i8 %dectmp
}

define i16 @"int16.+"(i16* %this, i16 %param) {
entry:
  %thisval = load i16, i16* %this, align 2
  %addtmp = add i16 %thisval, %param
  ret i16 %addtmp
}

define i16 @int16.-(i16* %this, i16 %param) {
entry:
  %thisval = load i16, i16* %this, align 2
  %subtmp = sub i16 %thisval, %param
  ret i16 %subtmp
}

define i16 @"int16.*"(i16* %this, i16 %param) {
entry:
  %thisval = load i16, i16* %this, align 2
  %multmp = mul i16 %thisval, %param
  ret i16 %multmp
}

define i16 @"int16./"(i16* %this, i16 %param) {
entry:
  %thisval = load i16, i16* %this, align 2
  %divtmp = sdiv i16 %thisval, %param
  ret i16 %divtmp
}

define i16 @"int16.="(i16* %this, i16 %param) {
entry:
  store i16 %param, i16* %this, align 2
  ret i16 %param
}

define i16 @"int16.++"(i16* %this) {
entry:
  %thisval = load i16, i16* %this, align 2
  %inctmp = add i16 %thisval, 1
  store i16 %inctmp, i16* %this, align 2
  ret i16 %inctmp
}

define i16 @int16.--(i16* %this) {
entry:
  %thisval = load i16, i16* %this, align 2
  %dectmp = add i16 %thisval, -1
  store i16 %dectmp, i16* %this, align 2
  ret i16 %dectmp
}

define i32 @"int32.+"(i32* %this, i32 %param) {
entry:
  %thisval = load i32, i32* %this, align 4
  %addtmp = add i32 %thisval, %param
  ret i32 %addtmp
}

define i32 @int32.-(i32* %this, i32 %param) {
entry:
  %thisval = load i32, i32* %this, align 4
  %subtmp = sub i32 %thisval, %param
  ret i32 %subtmp
}

define i32 @"int32.*"(i32* %this, i32 %param) {
entry:
  %thisval = load i32, i32* %this, align 4
  %multmp = mul i32 %thisval, %param
  ret i32 %multmp
}

define i32 @"int32./"(i32* %this, i32 %param) {
entry:
  %thisval = load i32, i32* %this, align 4
  %divtmp = sdiv i32 %thisval, %param
  ret i32 %divtmp
}

define i32 @"int32.="(i32* %this, i32 %param) {
entry:
  store i32 %param, i32* %this, align 4
  ret i32 %param
}

define i32 @"int32.++"(i32* %this) {
entry:
  %thisval = load i32, i32* %this, align 4
  %inctmp = add i32 %thisval, 1
  store i32 %inctmp, i32* %this, align 4
  ret i32 %inctmp
}

define i32 @int32.--(i32* %this) {
entry:
  %thisval = load i32, i32* %this, align 4
  %dectmp = add i32 %thisval, -1
  store i32 %dectmp, i32* %this, align 4
  ret i32 %dectmp
}

define i64 @"int64.+"(i64* %this, i64 %param) {
entry:
  %thisval = load i64, i64* %this, align 4
  %addtmp = add i64 %thisval, %param
  ret i64 %addtmp
}

define i64 @int64.-(i64* %this, i64 %param) {
entry:
  %thisval = load i64, i64* %this, align 4
  %subtmp = sub i64 %thisval, %param
  ret i64 %subtmp
}

define i64 @"int64.*"(i64* %this, i64 %param) {
entry:
  %thisval = load i64, i64* %this, align 4
  %multmp = mul i64 %thisval, %param
  ret i64 %multmp
}

define i64 @"int64./"(i64* %this, i64 %param) {
entry:
  %thisval = load i64, i64* %this, align 4
  %divtmp = sdiv i64 %thisval, %param
  ret i64 %divtmp
}

define i64 @"int64.="(i64* %this, i64 %param) {
entry:
  store i64 %param, i64* %this, align 4
  ret i64 %param
}

define i64 @"int64.++"(i64* %this) {
entry:
  %thisval = load i64, i64* %this, align 4
  %inctmp = add i64 %thisval, 1
  store i64 %inctmp, i64* %this, align 4
  ret i64 %inctmp
}

define i64 @int64.--(i64* %this) {
entry:
  %thisval = load i64, i64* %this, align 4
  %dectmp = add i64 %thisval, -1
  store i64 %dectmp, i64* %this, align 4
  ret i64 %dectmp
}

define i32 @foo(i32 %var) {
entry:
  %var1 = alloca i32, align 4
  store i32 %var, i32* %var1, align 4
  %0 = call i32 @"uint32.+"(i32* nonnull %var1, i32 5)
  ret i32 %0
}

define i32 @main() {
entry:
  %0 = call i32 @foo(i32 5)
  %y = alloca i32, align 4
  %1 = call i32 @"uint32.="(i32* nonnull %y, i32 %0)
  %2 = call i32 @"uint32.++"(i32* nonnull %y)
  %y.val = load i32, i32* %y, align 4
  ret i32 %y.val
}
