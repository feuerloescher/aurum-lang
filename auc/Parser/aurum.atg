/**
 * auc - The Aurum compiler
 * Copyright (c) 2016  Alexander Tsaregorodtsev <tuxerr.at@gmail.com>
 * Copyright (c) 2017  Max Mertens <max.mail@dameweb.de>
 * Distributed under the GNU GPL v3. For full terms see the file LICENSE.
 */

#include <string>
#include <cwchar>
#include "AST/AbstractSyntaxTree.hpp"
#include "Types/ScalarTypes.hpp"
#include "AST/Declarations.hpp"
#include "AST/Statements.hpp"
#include "AST/Blocks.hpp"
#include "AST/TypeStmt.hpp"
#include "AST/Expressions.hpp"

COMPILER Aurum

    std::shared_ptr<AST::AbstractSyntaxTree> ast;

//    bool FollowedByIdent() {
//        Token* x = scanner->Peek();
//        return la->kind == _ident && x->kind == _ident;
//    }

    std::string to_utf8(wchar_t* str) {
        std::size_t len = std::wcslen(str) + 1; // one character for terminating '\0'
        char multibyteStr[4*len];
        std::wcstombs(multibyteStr, str, 4*len);
        return std::string(multibyteStr);
    }

//TODO: Unicode support
CHARACTERS
    letter   = 'a'..'z' + 'A' .. 'Z'.
    digit    = '0'..'9'.
    hexdigit = digit + 'A'..'F'.
    octdigit = '0'..'7'.
    bindigit = '0'..'1'.
    idstart = letter + '_'.
    idletter = letter + digit.
    opstart = '#'.
    opletter = ANY - letter - digit - '(' - ')' - opstart - idstart - '"' - '\''.
    char = ANY.
    strdelim = '"'.

//TODO: Float and String support
TOKENS
    ident = idstart {idletter}.
    operator = opstart {char}
    | opletter { opletter }.
    integer =   "0x" hexdigit {hexdigit}
    |           "0b" bindigit {bindigit}
    |           "0" octdigit {octdigit}
    |           ["+" | "-"] digit {digit} ["l" | "L"].
    //float = ["+" | "-"] digit {digit} ["." digit {digit}] [("e" | "E") ["+" | "-"] digit {digit}] ["f" | "F" | "d" | "D"].
    string = strdelim {char} strdelim.
    //genericspec = letter | "?".
    //funcident = functionchar {functionchar}.

COMMENTS FROM "//" TO "\n"
COMMENTS FROM "/*" TO "*/"

IGNORE '\t' + '\r' + '\n' + '\f'

/*------------------------------------------------------------------------*/
/*------------------------------------------------------------------------*/
/*------------------------------------------------------------------------*/

PRODUCTIONS

Aurum   (. ast = std::make_shared<AST::AbstractSyntaxTree>(); AST::DeclarationPtr elem; .)
=   { Declaration<elem> (. ast->getDeclarations().push_back(elem); .)
    }.

/*------------------------------------------------------------------------*/

Declaration<AST::DeclarationPtr& elem> = (. AST::FunctionDefPtr funcDef; .)
    FunctionDefinition<funcDef> (. elem = funcDef; .).
//|   ConstantDefinition<constDef>
//|   ClassDefinition   TODO: Class definition
//|   ImportDefinition  TODO: Import definition
//|   TypeDefinition    TODO: Type definition
//|   ExportBlock       TODO: Export definition

/*------------------------------------------------------------------------*/

//~ FunctionDeclaration<FunctionDef& func> = (. FunctionDef func1; .)
//~ FunctionHeader<func1> (. func = func1; .)
//~ ["{" "}"] ";".

/*------------------------------------------------------------------------*/

FunctionDefinition<AST::FunctionDefPtr& funcDef> = (. AST::FunctionDeclPtr funcDecl; AST::BlockPtr block; .)
FunctionHeader<funcDecl> (
    Block<block>
|   ";") (. funcDef = std::make_shared<AST::FunctionDef>(funcDecl, block, AST::CodeLocation::none); .).

/*------------------------------------------------------------------------*/

FunctionHeader<AST::FunctionDeclPtr& func> = (. AST::TypeStmtPtr type; .)
//{FunctionModifier}
TypeStmt<type>
//[OperatorDeclaration]
ident (. func = std::make_shared<AST::FunctionDecl>(type, to_utf8(t->val), true, AST::CodeLocation::none); .)
//TODO: handle "export" keyword
"("
//[ParameterModifier]
[ TypeStmt<type>
ident (.    auto variable = std::make_shared<AST::VariableDefStmt>(type, to_utf8(t->val), AST::CodeLocation::none);
            func->getParameters().push_back(variable); .)
{","
TypeStmt<type>
ident (.    auto variable = std::make_shared<AST::VariableDefStmt>(type, to_utf8(t->val), AST::CodeLocation::none);
            func->getParameters().push_back(variable); .)
}] ")".

/*------------------------------------------------------------------------*/

//FunctionModifier =
//    "export"
//|   "const"
//|   "hidden".

/*------------------------------------------------------------------------*/

//TODO: Array support
TypeStmt<AST::TypeStmtPtr& typeStmt> = (. AST::BasicTypeStmtPtr basicTypeStmt; .)
    BasicTypeStmt<basicTypeStmt> (. typeStmt = basicTypeStmt; .)
    [ '&' (. basicTypeStmt->setIsReference(true); .) ].

BasicTypeStmt<AST::BasicTypeStmtPtr& basicTypeStmt> = ident
        (. basicTypeStmt = std::make_shared<AST::BasicTypeStmt>(to_utf8(t->val), AST::CodeLocation::none); .).

/*------------------------------------------------------------------------*/

//GenericType = GenericTypeSpecifier {"," GenericTypeSpecifier}. //TODO: generics code generation

//GenericTypeSpecifier = ident  [GenericModifier Type].

//GenericModifier =
//    "is"
//|   "has".

/*------------------------------------------------------------------------*/

//OperatorDeclaration = "operator" "(" integer ")" . //TODO: operator code generation

/*------------------------------------------------------------------------*/

//ParameterModifier = "\\". //TODO: Parameter Modifier Definition

/*------------------------------------------------------------------------*/

Statement<AST::StatementPtr& stmt> =
    IfStmt<stmt>
|   BlockStmt<stmt>
|   ReturnStmt<stmt>
//|   IF(FollowedByIdent()) VariableDefinition<stmt>
|   ("const" | "var" | "mut") VariableDefinition<stmt>
|   ExpressionStmt<stmt>.
//~ |   UnaryOperator<block, stmt7> (. stmt = stmt7; .).
//|   WhileLoop    TODO: While loop code generation
//|   ForLoop       TODO: For loop definition
//|   UnsafeBlock   TODO: Unsafe block definition

/*------------------------------------------------------------------------*/

IfStmt<AST::StatementPtr& stmt> = (. AST::ExpressionPtr conditionExpr; AST::BlockPtr block; .)
"if" "("
Expression<conditionExpr>
")"
Block<block> (. stmt = std::make_shared<AST::IfStmt>(conditionExpr, block, AST::CodeLocation::none); .).
//["else" //TODO: Add else code generation
//    Block<block> (. stmt = std::make_shared<IfStmt>(expr, block, CodeLocation::none); .)
//|   Block<block> (. stmt = std::make_shared<IfStmt>(expr, block, CodeLocation::none); .)
//].

Block<AST::BlockPtr& stmt> = (. AST::BlockPtr block = std::make_shared<AST::Block>(AST::CodeLocation::none);
AST::StatementPtr subStmt; .)
"{"
{Statement<subStmt> (. block->push_back(subStmt); .)}
"}".

BlockStmt<AST::StatementPtr& stmt> = (. AST::BlockPtr block; .)
    Block<block> (. stmt = block; .).

/*------------------------------------------------------------------------*/

//WhileLoop = "while" "(" Expression ")" (ImperativeExpression | "{" {ImperativeExpression} "}").

/*------------------------------------------------------------------------*/

ReturnStmt<AST::StatementPtr& stmt> = (. AST::ExpressionPtr expr; .)
"return"
[Expression<expr>] (. stmt = std::make_shared<AST::ReturnStmt>(expr, AST::CodeLocation::none); .)
";".

/*------------------------------------------------------------------------*/

VariableDefinition<AST::StatementPtr& stmt> = (. AST::TypeStmtPtr type; .)
TypeStmt<type>
ident (. stmt = std::make_shared<AST::VariableDefStmt>(type, to_utf8(t->val), AST::CodeLocation::none); .).
//[ "=" Expression<block, stmt1> ] ";".

/*------------------------------------------------------------------------*/

ExpressionStmt<AST::StatementPtr& stmt> = (. AST::ExpressionPtr expr; .)
Expression<expr> (. stmt = expr; .) ";".

/*------------------------------------------------------------------------*/

//~ VariableDefinitionAssignment<Block block, Expression& expr> = (. wchar_t* id; Expression expr1; .)
//~ ident (. if(t.val != "int") { SemErr("Only integers are currently supported."); } .)
//~ ident (. id = t.val; .)
//~ "="
//~ Expression<block, expr1> (.    expr = make_shared<MethodCallExpr>(make_shared<VariableExpr>(id, block, CodeLocation::none), "=", block, CodeLocation::none);
                                    //~ expr->getArgs().push_back(expr1); .)
//~ ";".

//~ /*------------------------------------------------------------------------*/

//~ FunctionCall<Block block, Expression& expr> = (. Expression expr1; .)
//~ InlineFunctionCall<block, expr1> (. expr = expr1.)
//~ ";".

//~ /*------------------------------------------------------------------------*/

//~ InlineFunctionCall<Block block, Expression& expr> = (. Expression expr1; Expression expr2; .)
//~ ident (. expr = make_shared<FunctionCallExpr>(t.val, block, CodeLocation::none); .)
//~ "("
//~ [Expression<block, expr1> (. expr->getParameters().push_back(expr1); .)
//~ {","
//~ Expression<block, expr2> (. expr->getParameters().push_back(expr2); .)
//~ }] ")".

//~ /*------------------------------------------------------------------------*/

//~ AssignOperator<Block block, Expression& expr> = (. wchar_t* id; Expression expr1; .)
//~ ident (. id = t.val; .)
//~ "="
//~ Expression<block, expr1> (.    expr = make_shared<MethodCallExpr>(make_shared<VariableExpr>(id, block, CodeLocation::none), "=", block, CodeLocation::none);
                                    //~ expr->getArgs().push_back(make_shared<VariableExpr>(expr1, block, CodeLocation::none)); .)
//~ ";".

/*------------------------------------------------------------------------*/

//~ UnaryOperator<Block block, Expression& expr> = (. wchar_t* id; Expression expr1; .)
//~ ident (. id = t.val; .)
//~ Expression<block, expr1> (. expr = make_shared<MethodCallExpr>(expr1, id, block, CodeLocation::none); .)
//~ ";".

/*------------------------------------------------------------------------*/

//SimpleValueExpr = SimpleValueStart { SimpleValueModifier }.
//
//SimpleValueModifier = "(" [ArgumentList] ")" | "[" [ArgumentList] "]" | "." ident.
//
//SimpleValueStart = ident | integer | "(" Expression<expr1> ")".
//
//ArgumentList = Expression<expr1> { "," Expression<expr1>}.

//Expression<AST::ExpressionPtr& expr> = //(. wchar_t* op1, op2; AST::ExpressionPtr expr1; AST::ExpressionPtr expr2; .)
//(
//        VariableExpr<expr>
//                | ConstantExpr<expr>
//                | "(" Expression<expr> ")"
//)
//{
//"." ident
//| "(" ")"
//| "[" "]"
//| operator Expression<operandExpr>
//}.

Expression<AST::ExpressionPtr& expr> = (. AST::ExpressionPtr operandExpr; .)
BasicExpression<expr>
{
operator BasicExpression<operandExpr>
}.

BasicExpression<AST::ExpressionPtr& expr> =
(
    "(" Expression<expr> ")"
    | VariableExpr<expr>
    | ConstantExpr<expr>
)
{
"." ident
| "(" ")"
| "[" "]"
}.

VariableExpr<AST::ExpressionPtr& expr> = ident.
ConstantExpr<AST::ExpressionPtr& expr> = integer.

//~ ident (. id = t.val; .)
//~ | integer (. expr = make_shared<ConstIntExpr>(id, stoi(t.val), block, CodeLocation::none); .)
//~ //| float (. SemErr("Only integer types are implemented"); .)
//~ | string (. SemErr("Only integer types are implemented"); .)
//~ | InlineFunctionCall<block, expr1> (. expr = expr1; .)
//~ | "("
    //~ Expression<block, expr1> (. expr = make_shared<MethodCallExpr>(expr1, la.val, block, CodeLocation::none); .)
  //~ ")".
/*| Expression<block, expr1> (. expr = make_shared<MethodCallExpr>(expr1, la.val, block, CodeLocation::none); .)
  operator
  Expression<block, expr2> (. expr->getArgs().push_back(expr2); .).*/

/*------------------------------------------------------------------------*/

//TODO: Implement const, float, string
//ConstantDefinition<Block block, VariableDefAssignStmt& stmt> =
//"const"
// ident (. if(t.val != "int") { SemErr("Only integer types are implemented"); } .)
// ident (. stmt = make_shared<MethodCallExpr>(make_shared<VariableExpr>(t.val,& block, CodeLocation::none), "=",& block, CodeLocation::none);.)
// "="
// integer (. stmt->getArgs().push_back(make_shared<ConstIntExpr>(t.val, stoi(t.val), block, CodeLocation::none)); .)
// //| float (. SemErr("Only integer types are implemented"); .)
// | string (. SemErr("Only integer types are implemented"); .)
// ";".

END Aurum.
